Indices

Indices speed up searching of values in a certain column or group of columns 
Usually implemented as B-trees
Indices can be built-in the table (clustered) or stored externally (non-clustered)
Adding and deleting records in indexed tables is slower!
Indices should be used for big tables only (e.g. 50 000 rows)


A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space 
to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a database table every time a database table 
is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of 
ordered records.



Index architecture/Indexing Methods

Non-clustered
The data is present in arbitrary order, but the logical ordering is specified by the index. The data rows may be spread throughout the table regardless of 
the value of the indexed column or expression. The non-clustered index tree contains the index keys in sorted order, with the leaf level of the index containing
 the pointer to the record (page and the row number in the data page in page-organized engines; row offset in file-organized engines).
In a non-clustered index
The physical order of the rows is not the same as the index order.
The indexed columns are typically non-primary key columns used in JOIN, WHERE, and ORDER BY clauses.
There can be more than one non-clustered index on a database table.

Clustered
Clustering alters the data block into a certain distinct order to match the index, resulting in the row data being stored in order. Therefore,
 only one clustered index can be created on a given database table. Clustered indices can greatly increase overall speed of retrieval, but usually
 only where the data is accessed sequentially in the same or reverse order of the clustered index, or when a range of items is selected.
Since the physical records are in this sort order on disk, the next row item in the sequence is immediately before or after the last one, 
and so fewer data block reads are required. The primary feature of a clustered index is therefore the ordering of the physical data rows in accordance
 with the index blocks that point to them. Some databases separate the data and index blocks into separate files, others put two completely different
 data blocks within the same physical file(s).

Cluster
When multiple databases and multiple tables are joined, it's referred to as a cluster (not to be confused with clustered index described above). 
The records for the tables sharing the value of a cluster key shall be stored together in the same or nearby data blocks. This may improve the joins of
 these tables on the cluster key, since the matching records are stored together and less I/O is required to locate them.[2] The cluster configuration defines
 the data layout in the tables that are parts of the cluster. A cluster can be keyed with a B-Tree index or a hash table. The data block where the table record
 is stored is defined by the value of the cluster key.